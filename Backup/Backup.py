import os
import google.generativeai as genai
from dotenv import load_dotenv
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import random
import textwrap
import time  # Para simular atrasos

# --- Configura√ß√£o Inicial ---
load_dotenv()
if "GOOGLE_API_KEY" not in os.environ:
    raise ValueError("A chave da API do Gemini (GOOGLE_API_KEY) n√£o est√° configurada no arquivo .env")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

MODEL_NAME = 'models/gemini-2.0-pro-exp-02-05'  # Posso Substituir por outras IA's

try:
    model = genai.GenerativeModel(MODEL_NAME)  # Inicializa o modelo
except Exception as e:
    print(f"Erro ao inicializar o modelo: {e}")
    raise ValueError(f"N√£o foi poss√≠vel inicializar o modelo '{MODEL_NAME}'. Verifique se o nome est√° correto e se voc√™ tem acesso a ele.") from e


app = Flask(__name__)

# --- Constantes ---

MODULOS = {  # Estrutura dos m√≥dulos (exemplo - personalize!)
    "introducao": {
        "titulo": "Introdu√ß√£o ao Empreendedorismo",
        "submodulos": [
            "O que √© Empreendedorismo?",
            "Por que Empreender na Universidade?",
            "Mitos e Verdades sobre Empreender",
        ],
        "objetivos": [
            "Entender o conceito de empreendedorismo.",
            "Identificar oportunidades de empreender na universidade.",
            "Desmistificar o empreendedorismo.",
        ]
    },
     "modulo1": {
        "titulo": "Identificando Oportunidades",
        "submodulos": [
            "O que √© uma oportunidade de neg√≥cio?",
            "Como identificar problemas e necessidades.",
            "An√°lise de mercado e tend√™ncias (para a UVV).",
            "Ferramentas para identificar oportunidades (ex: Canvas).",
        ],
        "objetivos": [
            "Definir o que constitui uma oportunidade de neg√≥cio.",
            "Aprender a identificar problemas que podem ser transformados em neg√≥cios.",
            "Analisar o mercado e identificar tend√™ncias relevantes.",
            "Utilizar ferramentas como o Canvas para modelar oportunidades.",
        ]
    },
    "modulo2": {
        "titulo": "Desenvolvimento do Modelo de Neg√≥cio",
        "submodulos":[
            "O que √© um modelo de neg√≥cio?",
            "Canvas: Uma ferramenta poderosa.",
            "Proposta de valor.",
            "Segmentos de clientes (na UVV).",
            "Canais de distribui√ß√£o e comunica√ß√£o.",
            "Relacionamento com clientes.",
            "Fontes de receita.",
            "Recursos-chave.",
            "Atividades-chave.",
            "Parcerias-chave.",
            "Estrutura de custos.",
        ],
        "objetivos": [
            "Compreender o conceito de modelo de neg√≥cio e sua import√¢ncia.",
            "Dominar a ferramenta Canvas.",
            "Definir a proposta de valor do neg√≥cio.",
            "Identificar e segmentar os clientes.",
            "Escolher os canais de distribui√ß√£o e comunica√ß√£o adequados.",
            "Estabelecer um bom relacionamento com os clientes.",
            "Definir as fontes de receita do neg√≥cio.",
            "Identificar os recursos, atividades e parcerias chave.",
            "Analisar a estrutura de custos do neg√≥cio.",
        ]
    },
    "modulo3": {
        "titulo": "Valida√ß√£o e Testes",
        "submodulos": [
            "Por que validar √© crucial?",
            "MVP (Minimum Viable Product): O que √© e como criar.",
            "Testando com potenciais clientes (na UVV).",
            "Coleta e an√°lise de feedback.",
            "Itera√ß√£o e ajustes no modelo de neg√≥cio.",
        ],
        "objetivos": [
            "Entender a import√¢ncia da valida√ß√£o do modelo de neg√≥cio.",
            "Aprender a criar um MVP.",
            "Realizar testes com potenciais clientes.",
            "Coletar e analisar feedback de forma eficaz.",
            "Iterar e ajustar o modelo de neg√≥cio com base nos resultados.",
        ]
    },
    "mentoria": {
        "titulo": "Mentoria",
        "submodulos": [
            "Como funciona a mentoria",
            "Preparando para mentoria",
        ],
        "objetivos":[
            "Preparar o aluno para a mentoria.",
            "Explicar sobre a mentoria."
        ]
    },
     "fim":{
        "titulo": "Fim",
        "submodulos": [
            "Fim do curso"
        ],
         "objetivos":[
            "Finalizar curso."
         ]
     }

}

# --- Prompts (Extensa lista de exemplos - personalize!) ---

# Prompts para o formul√°rio inicial
FORMULARIO_PROMPTS = {
    "saudacao": [
        "Ol√°! Sou o assistente do curso de empreendedorismo da UVV, com mais de 50 anos de experi√™ncia em neg√≥cios, finan√ßas, contabilidade e, claro, startups! üòâ Estou aqui para te guiar nessa jornada. Para come√ßarmos, que tal me contar um pouco sobre voc√™?",
        "Oi! Pronto para mergulhar no mundo do empreendedorismo? üòä Sou um especialista em neg√≥cios, contabilidade, startups e finan√ßas, com d√©cadas de experi√™ncia.  Antes de mais nada, gostaria de te conhecer melhor.",
        "Ol√°! Bem-vindo(a) ao curso de empreendedorismo da UVV! Sou o seu assistente, um especialista em ajudar jovens empreendedores como voc√™ a terem sucesso. Para personalizarmos o curso, preciso de algumas informa√ß√µes suas. üòâ",
        "Ol√°! Sou um especialista em neg√≥cios, startups, finan√ßas e contabilidade, com vasta experi√™ncia no mercado. Estou aqui para te ajudar a trilhar o seu caminho no empreendedorismo. Para come√ßarmos, que tal me contar um pouco sobre voc√™?",
        "Oi! Preparado para transformar suas ideias em realidade? üòä Sou um especialista em ajudar jovens empreendedores a terem sucesso. Antes de mais nada, gostaria de te conhecer melhor.",
        "Ol√°! Bem-vindo(a) ao curso de empreendedorismo! Sou o seu assistente, um especialista com mais de 50 anos de experi√™ncia em diversas √°reas do mundo dos neg√≥cios. Para personalizarmos o curso, preciso de algumas informa√ß√µes suas. üòâ",
    ],
    "pergunta": [
        "Para continuarmos, poderia me dizer {pergunta}?",
        "Agora, me diga: {pergunta}?",
        "E sobre {pergunta}, o que voc√™ me conta?",
        "Continuando, {pergunta}?",
        "{pergunta} (Estou curioso! üòä)",
        "Para te ajudar da melhor forma, preciso saber: {pergunta}?",
        "Vamos l√°, me conte um pouco mais. {pergunta}?",
        "E ent√£o, {pergunta}?",
    ],
    "agradecimento": [
        "√ìtimo! Obrigado pela informa√ß√£o.",
        "Perfeito! Anotado.",
        "Excelente! üëç",
        "Muito bom! üòä",
        "Informa√ß√£o valiosa! Obrigado.",
        "Agrade√ßo por compartilhar!",
        "Isso me ajuda a personalizar o curso para voc√™. Obrigado!",
    ],
      "prompt_geral": """
        Voc√™ √© um assistente especialista em empreendedorismo, com foco em universit√°rios da UVV.
        Voc√™ tem mais de 50 anos de experi√™ncia em diversas √°reas, incluindo:

        * Finan√ßas: investimentos, gest√£o financeira, an√°lise de viabilidade, etc.
        * Startups: cria√ß√£o, desenvolvimento, acelera√ß√£o, capta√ß√£o de recursos, etc.
        * Neg√≥cios (em geral): gest√£o, estrat√©gia, marketing, vendas, opera√ß√µes, etc.
        * Contabilidade: princ√≠pios cont√°beis, legisla√ß√£o, impostos, etc.
        * Abertura de empresas: todos os passos e requisitos legais.
        * Conhecimentos *atuais*: voc√™ est√° sempre atualizado com as √∫ltimas tend√™ncias, tecnologias e regulamenta√ß√µes.

        Seu objetivo √© guiar o aluno no curso de empreendedorismo, coletando informa√ß√µes,
        apresentando conte√∫do, respondendo perguntas e oferecendo suporte personalizado.

        Seja SEMPRE amig√°vel, did√°tico e use uma linguagem acess√≠vel para universit√°rios.
        Use emojis e formata√ß√£o (negrito, it√°lico) para tornar a conversa mais expressiva.
        Divida o conte√∫do em blocos menores, adequados para mensagens do WhatsApp.

        *LEMBRE-SE SEMPRE*: Voc√™ tem acesso ao hist√≥rico completo da conversa e ao perfil do aluno.
        Use essas informa√ß√µes para personalizar suas respostas e manter o contexto.

        *N√ÉO* repita as mesmas frases e perguntas. Varie suas respostas. Seja PROATIVO.
        Fa√ßa perguntas, ofere√ßa exemplos, sugira recursos e incentive o aluno.

        Use os seguintes princ√≠pios ao interagir:
        1. Clareza: Seja claro e objetivo em suas explica√ß√µes.
        2. Relev√¢ncia: Forne√ßa informa√ß√µes relevantes para o contexto do aluno.
        3. Personaliza√ß√£o: Adapte suas respostas ao perfil e hist√≥rico do aluno.
        4. Engajamento: Incentive a participa√ß√£o e o aprendizado ativo do aluno.
        5. Empatia: Demonstre compreens√£o e apoio ao aluno.
        6. Proatividade:  Antecipe as necessidades do aluno e ofere√ßa ajuda antes que ele pe√ßa.
        7. Precis√£o:  Garanta que suas respostas estejam corretas e atualizadas.
        8. Concis√£o:  Seja breve e direto ao ponto, mas sem comprometer a informa√ß√£o.
        9. Contextualiza√ß√£o:  Sempre leve em considera√ß√£o o hist√≥rico da conversa.
        10. Variedade: Use diferentes tipos de respostas, perguntas, exemplos, etc.

        Voc√™ est√° aqui para ajudar o aluno a ter SUCESSO!
        """
}

CONTEUDO_PROMPTS = {
    "introducao": [
        "Vamos come√ßar com uma introdu√ß√£o a {submodulo}. O que voc√™ acha?",
        "Que tal come√ßarmos pelo come√ßo? üòâ Vamos falar sobre {submodulo}.",
        "Preparado para o primeiro passo? Vamos abordar {submodulo}.",
        "Dando o pontap√© inicial, vamos explorar o tema: {submodulo}.",
        "Para aquecer os motores, vamos discutir sobre {submodulo}.",
    ],
    "apresentacao": [
        "Aqui est√° um resumo sobre {submodulo}, adaptado para o seu perfil:\n\n{conteudo}",
        "Vamos explorar {submodulo}. Aqui est√° o que voc√™ precisa saber, considerando seus interesses:\n\n{conteudo}",
        "Mergulhando em {submodulo}... Preste aten√ß√£o, pois isso √© importante para voc√™:\n\n{conteudo}",
        "Com base no seu perfil, preparei este material sobre {submodulo}:\n\n{conteudo}",
        "Considerando seus objetivos, vamos aprofundar em {submodulo}:\n\n{conteudo}",
    ],
    "pergunta_reflexao": [
        "E a√≠, o que voc√™ achou de {submodulo}? Alguma d√∫vida ou insight?",
        "Pensando sobre {submodulo}, qual a sua opini√£o sobre isso?",
        "Com base no que vimos sobre {submodulo}, voc√™ consegue pensar em algum exemplo pr√°tico?",
        "Refletindo sobre {submodulo}... Isso te lembra alguma experi√™ncia sua?",
        "Qual a sua principal conclus√£o sobre {submodulo}?",
        "Voc√™ se identificou com algum ponto espec√≠fico de {submodulo}?",
        "Como voc√™ aplicaria o que aprendeu sobre {submodulo} na sua realidade?",
    ],
    "exemplo_adicional": [
        "A prop√≥sito, aqui vai um exemplo pr√°tico relacionado a {submodulo}, pensando no contexto da UVV:\n\n{exemplo}",
        "Para ilustrar melhor {submodulo}, veja este exemplo de um neg√≥cio que poderia surgir na UVV:\n\n{exemplo}",
        "Pensando em {submodulo}, lembrei de um caso interessante que aconteceu aqui na UVV:\n\n{exemplo}",
        "Olha s√≥ que legal este exemplo relacionado a {submodulo}, que tem tudo a ver com a UVV:\n\n{exemplo}",
        "Para voc√™ que √© da UVV, este exemplo sobre {submodulo} pode ser inspirador:\n\n{exemplo}",
    ],
    "estudo_de_caso": [
        "Que tal analisarmos um estudo de caso sobre {submodulo}? Veja s√≥:\n\n{estudo_de_caso}",
        "Tenho um estudo de caso interessante sobre {submodulo} que pode te interessar:\n\n{estudo_de_caso}",
        "Para aprofundar em {submodulo}, vamos ver este estudo de caso:\n\n{estudo_de_caso}",
    ],
    "link_externo": [
        "Se voc√™ quiser saber mais sobre {submodulo}, recomendo este link:\n\n{link}",
        "Este artigo sobre {submodulo} pode te interessar:\n\n{link}",
        "D√™ uma olhada neste v√≠deo sobre {submodulo}:\n\n{link}",
        "Para complementar seus estudos sobre {submodulo}, sugiro este recurso:\n\n{link}",
    ],
}

RESPOSTA_PROMPTS = {
    "resposta_curta": [
        "Entendi. {resposta_curta}",
        "Certo. {resposta_curta}",
        "Ok. {resposta_curta}",
        "Registrado. {resposta_curta}",
        "Beleza. {resposta_curta}",
    ],
    "resposta_longa": [
        "Interessante! {resposta_longa}",
        "Muito bom! Voc√™ est√° no caminho certo. {resposta_longa}",
        "Excelente ponto de vista! {resposta_longa}",
        "√ìtima an√°lise! {resposta_longa}",
        "Perfeito!  Isso mostra que voc√™ est√° aprendendo. {resposta_longa}",
    ],
    "pergunta_aberta": [
        "Me fale mais sobre {pergunta_aberta}.",
        "Gostaria de saber mais sobre {pergunta_aberta}. O que voc√™ pensa?",
        "E sobre {pergunta_aberta}, qual a sua experi√™ncia?",
        "Aprofundando um pouco... {pergunta_aberta}?",
        "Compartilhe comigo seus pensamentos sobre {pergunta_aberta}.",
    ],
    "resposta_duvida": [
        "{resposta_duvida}",
        "Respondendo √† sua pergunta: {resposta_duvida}",
        "Esclarecendo sua d√∫vida: {resposta_duvida}",
        "Vamos l√°, vou te explicar. {resposta_duvida}",
        "Em rela√ß√£o √† sua pergunta, {resposta_duvida}",
    ],
    "resposta_positiva": [
        "Sim, exatamente! {resposta_positiva}",
        "Com certeza! {resposta_positiva}",
        "Isso mesmo! {resposta_positiva}",
        "Voc√™ acertou em cheio! {resposta_positiva}",
        "Perfeito! {resposta_positiva}",
    ],
    "resposta_negativa": [
        "N√£o exatamente. {resposta_negativa}",
        "Na verdade, n√£o √© bem assim. {resposta_negativa}",
        "Hum... N√£o √© isso. {resposta_negativa}",
        "Preciso corrigir um ponto. {resposta_negativa}",
        "Vamos esclarecer isso. {resposta_negativa}",
    ],
    "elogio": [
        "Muito bem!",
        "Excelente!",
        "Parab√©ns!",
        "√ìtimo trabalho!",
        "Continue assim!",
        "Estou gostando de ver!",
        "Voc√™ est√° indo muito bem!",
    ],
     "incentivo": [
        "N√£o desista!",
        "Voc√™ consegue!",
        "Continue se esfor√ßando!",
        "Acredite em voc√™!",
        "O sucesso est√° pr√≥ximo!",
        "Mantenha o foco!",
        "Voc√™ tem potencial!",
    ],
    "feedback_positivo": [
        "Gostei da sua resposta! {feedback_positivo}",
        "Sua pergunta foi muito pertinente. {feedback_positivo}",
        "Voc√™ demonstrou um bom entendimento do assunto. {feedback_positivo}",
        "Excelente progresso! {feedback_positivo}",
        "Fico feliz em ver seu empenho. {feedback_positivo}",
    ],
    "feedback_construtivo": [
        "Que tal pensarmos um pouco mais sobre isso? {feedback_construtivo}",
        "Talvez voc√™ possa reformular sua resposta. {feedback_construtivo}",
        "Vamos explorar esse ponto com mais detalhes. {feedback_construtivo}",
        "Considere este outro aspecto da quest√£o. {feedback_construtivo}",
        "Ainda h√° espa√ßo para melhorias, mas voc√™ est√° no caminho certo. {feedback_construtivo}",
    ],
    "humor": [  # Adicionando um toque de humor (opcional)
        "Essa foi por pouco! üòâ {humor}",
        "Quase l√°! üòÑ {humor}",
        "Voc√™ √© um empreendedor em constru√ß√£o! üöß {humor}",
        "N√£o se preocupe, at√© os maiores empreendedores j√° erraram. üòâ {humor}",
    ],
}

# --- Estado do Aluno ---
# --- Estado do Aluno ---
alunos = {}

def get_estado_aluno(numero):
    if numero not in alunos:
        alunos[numero] = {
            "formulario_completo": False,
            "perfil": {
                "nome": "N/A",
                "universidade": "UVV",  # Pr√©-preenchido
                "curso": "N/A",
                "periodo": "N/A",
                "experiencia": "N/A",
                "objetivos": "N/A",
                "conhecimento": "N/A",
                "interesses": "N/A",
                "conversa": []  # CORRIGIDO: Lista vazia
            },
            "modulo_atual": "introducao",
            "submodulo_atual": None,
            "aguardando_resposta": None,
            "contexto": "formulario",
            "pontos": 0,
            "quiz_pendente": False,
            "respostas_quiz": [],
            "quiz_atual": None,
        }
    return alunos[numero]

# --- Fun√ß√µes Auxiliares ---

def gerar_prompt_mestre():
    """Cria o prompt mestre que define a persona do assistente."""
    return textwrap.dedent("""
    Voc√™ √© um assistente virtual especialista em empreendedorismo, com mais de 50 anos de experi√™ncia em:
    * Finan√ßas: investimentos, gest√£o financeira, an√°lise de viabilidade.
    * Startups: cria√ß√£o, desenvolvimento, acelera√ß√£o, capta√ß√£o de recursos.
    * Neg√≥cios: gest√£o, estrat√©gia, marketing, vendas, opera√ß√µes.
    * Contabilidade: princ√≠pios cont√°beis, legisla√ß√£o, impostos.
    * Abertura de empresas: todos os passos e requisitos legais.
    * Conhecimentos atuais: voc√™ est√° SEMPRE atualizado com as √∫ltimas tend√™ncias.

    Voc√™ est√° EXCLUSIVAMENTE focado em ajudar universit√°rios da UVV a desenvolverem seus primeiros neg√≥cios.

    Seu objetivo √© guiar o aluno no curso de empreendedorismo, respondendo perguntas,
    apresentando conte√∫do e oferecendo suporte personalizado.

    Use uma linguagem ACESS√çVEL para universit√°rios.
    Seja SEMPRE amig√°vel, did√°tico, paciente e motivador.
    Use emojis e formata√ß√£o (negrito, it√°lico) para tornar a conversa mais expressiva no WhatsApp.
    Divida o conte√∫do em blocos menores, adequados para mensagens do WhatsApp.

    LEMBRE-SE: Voc√™ tem acesso ao hist√≥rico completo da conversa e ao perfil do aluno.
    Use essas informa√ß√µes para personalizar suas respostas e manter o contexto.

    Varie suas respostas. N√ÉO repita as mesmas frases e perguntas. Seja PROATIVO.
    Fa√ßa perguntas, ofere√ßa exemplos, sugira recursos e incentive o aluno.

    Voc√™ est√° aqui para ajudar o aluno a ter SUCESSO!
    """)

def extrair_informacoes(conversa):
    """Extrai informa√ß√µes do perfil do aluno da conversa usando o Gemini."""
    prompt = f"""
    Da conversa a seguir, extraia as seguintes informa√ß√µes:
    1. Nome completo:
    2. Curso:
    3. Per√≠odo/Semestre:
    4. Experi√™ncia empreendedora:
    5. Objetivos com o curso:
    6. N√≠vel de conhecimento em empreendedorismo (1-5):
    7. √Åreas de interesse:

    Conversa:
    {conversa}

    Preencha cada item com a informa√ß√£o correspondente. Se alguma informa√ß√£o
    n√£o estiver dispon√≠vel, escreva "N/A".
    """
    try:
        resposta = model.generate_content(prompt).text
        info = {}
        for linha in resposta.splitlines():
            if ":" in linha:
                chave, valor = linha.split(":", 1)
                info[chave.strip()] = valor.strip()
        return info
    except Exception as e:
        print(f"Erro ao extrair informa√ß√µes: {e}")
        return {}

def coletar_informacoes_iniciais(mensagem, estado):
    """Coleta informa√ß√µes do aluno de forma flex√≠vel."""
    #Adiciona a conversa
    estado["conversa"].append(f"Aluno: {mensagem}") #CORRETO

     # Escolhe aleatoriamente um prompt de sauda√ß√£o ou pergunta
    if not estado["perfil"]["nome"] != "N/A":
        prompt_tipo = "saudacao"
    else:
        prompt_tipo = "pergunta"

    prompt_escolhido = random.choice(FORMULARIO_PROMPTS[prompt_tipo])

     # Se for uma pergunta, formata com a pergunta apropriada
    if prompt_tipo == "pergunta":
        perguntas_pendentes = []
        if estado["perfil"]["nome"] == "N/A":
            perguntas_pendentes.append("Qual √© o seu nome completo?")
        if estado["perfil"]["curso"] == "N/A":
            perguntas_pendentes.append("Qual curso voc√™ est√° fazendo?")
        if estado["perfil"]["periodo"] == "N/A":
            perguntas_pendentes.append("Em qual per√≠odo/semestre voc√™ est√°?")
        if estado["perfil"]["experiencia"] == "N/A":
            perguntas_pendentes.append("Voc√™ j√° teve alguma experi√™ncia empreendedora (mesmo que informal)?")
        if estado["perfil"]["objetivos"] == "N/A":
            perguntas_pendentes.append("Quais s√£o seus principais objetivos com este curso?")
        if estado["perfil"]["conhecimento"] == "N/A":
            perguntas_pendentes.append("Em uma escala de 1 a 5, como voc√™ avalia seu conhecimento sobre empreendedorismo?")
        if estado["perfil"]["interesses"] == "N/A":
            perguntas_pendentes.append("Quais √°reas do empreendedorismo te interessam mais?")

        if not perguntas_pendentes:  # Se n√£o houver mais perguntas
            estado["formulario_completo"] = True
            estado["contexto"] = "apresentando_conteudo"
            estado["submodulo_atual"] = 0
            return [
                "Formul√°rio completo! Suas informa√ß√µes foram registradas.",
                "Vamos come√ßar com o m√≥dulo de introdu√ß√£o.",
                *apresentar_conteudo(estado)
            ]

        pergunta = random.choice(perguntas_pendentes)
        prompt_escolhido = prompt_escolhido.format(pergunta=pergunta)
    prompt = f"""
    {gerar_prompt_mestre()}
    
    {prompt_escolhido}

    Hist√≥rico da conversa:
    {' '.join(estado["conversa"])}

    Responda de forma concisa.
    """
    try:
        resposta = model.generate_content(prompt).text
        estado["conversa"].append(f"Assistente: {resposta}") #CORRETO
        #Extrai informa√ß√µes a cada intera√ß√£o
        estado["perfil"].update(extrair_informacoes(' '.join(estado["conversa"])))

        # Verifica se TODAS as informa√ß√µes foram coletadas
        todas_info_coletadas = all(
            estado["perfil"][campo] != "N/A"
            for campo in ["nome", "curso", "periodo", "experiencia", "objetivos", "conhecimento", "interesses"]
        )
        if todas_info_coletadas:
            estado["formulario_completo"] = True
            estado["contexto"] = "apresentando_conteudo"
            estado["submodulo_atual"] = 0
            #Junta as mensagens e as envia
            return [
                "Formul√°rio completo! Suas informa√ß√µes foram registradas.",
                "Vamos come√ßar com o m√≥dulo de introdu√ß√£o.",
                *apresentar_conteudo(estado) #Desempacota a lista
            ]
        return [resposta]  # Retorna uma lista com a resposta

    except Exception as e:
        print(f"Erro ao coletar informa√ß√µes: {e}")
        return ["Desculpe, tive um problema. Tente novamente."]

def gerar_indice_modulo(modulo, perfil_aluno):
    """Gera um √≠ndice (t√≥picos/subt√≥picos) para um m√≥dulo."""
    prompt = f"""
    Crie um √≠ndice detalhado para o m√≥dulo '{modulo}' do curso.
    Considere o perfil do aluno: {perfil_aluno}

    Use, no m√°ximo, 3 n√≠veis de indenta√ß√£o (t√≥pico, subt√≥pico, sub-subt√≥pico).
    Formato:
    T√≥pico 1: ...
        Subt√≥pico 1.1: ...
    """
    try:
        return model.generate_content(prompt).text
    except Exception as e:
        print(f"Erro ao gerar √≠ndice: {e}")
        return None

def gerar_conteudo_submodulo(modulo, submodulo_indice, perfil_aluno, historico):
    """Gera o conte√∫do de um subm√≥dulo espec√≠fico."""
    indice = gerar_indice_modulo(modulo, perfil_aluno)
    if indice is None:
        return "Erro ao gerar o √≠ndice do m√≥dulo."

    linhas_indice = indice.splitlines()
    try:
        submodulo_nome = linhas_indice[submodulo_indice].strip()
    except IndexError:
        return None  # Fim do m√≥dulo

    prompt = f"""
    {gerar_prompt_mestre()}

    Apresente o conte√∫do do seguinte t√≥pico/subt√≥pico do m√≥dulo '{MODULOS[modulo]["titulo"]}':

    {submodulo_nome}

    Considere o perfil do aluno:
    {perfil_aluno}

    Hist√≥rico da conversa:
    {' '.join(historico)}

    Seja did√°tico, use exemplos pr√°ticos e adapte a linguagem ao perfil do aluno.
    Divida o conte√∫do em blocos menores, adequados para mensagens do WhatsApp.
    """
    try:
        conteudo = model.generate_content(prompt).text
        return conteudo
    except Exception as e:
        print(f"Erro ao gerar conte√∫do do subm√≥dulo: {e}")
        return f"Erro ao carregar o conte√∫do do subm√≥dulo {submodulo_indice}"

def apresentar_conteudo(estado):
    """Apresenta o conte√∫do do m√≥dulo atual, em blocos."""
    modulo = estado["modulo_atual"]
    submodulo_indice = estado["submodulo_atual"]

    if submodulo_indice is None: #Primeira vez
        submodulo_indice = 0
        estado["submodulo_atual"] = 0

    conteudo = gerar_conteudo_submodulo(modulo, submodulo_indice, estado["perfil"], estado["conversa"])
    if conteudo is None:  # Fim do m√≥dulo
        if avancar_modulo(estado):
            estado["submodulo_atual"] = 0
            return apresentar_conteudo(estado)  # Inicia o pr√≥ximo m√≥dulo
        else:
            estado["contexto"] = "fim"
            return ["Parab√©ns! Voc√™ concluiu todos os m√≥dulos do curso."]

    estado["submodulo_atual"] += 1
    estado["aguardando_resposta"] = "sim/nao"
    estado["contexto"] = "apresentando_conteudo"

    # Escolhe aleatoriamente prompts para apresenta√ß√£o e perguntas
    prompt_apresentacao = random.choice(CONTEUDO_PROMPTS["apresentacao"]).format(submodulo=MODULOS[modulo]["submodulos"][submodulo_indice], conteudo=conteudo)
    prompt_pergunta = random.choice(CONTEUDO_PROMPTS["pergunta_reflexao"]).format(submodulo=MODULOS[modulo]["submodulos"][submodulo_indice])

    # Formata a mensagem com negrito e quebras de linha
    mensagem = f"*{MODULOS[modulo]['titulo']}*\n\n"  # T√≠tulo em negrito
    mensagem += prompt_apresentacao + "\n\n"
    mensagem += prompt_pergunta + " (sim/n√£o)"

    return [mensagem]
def gerar_quiz(modulo):
    """Gera um quiz para o m√≥dulo usando a API do Gemini."""
    prompt = f"Crie um quiz de 3 perguntas (m√∫ltipla escolha) sobre o m√≥dulo '{modulo}' do curso para universit√°rios sobre como abrir o primeiro neg√≥cio.  Forne√ßa as perguntas, op√ß√µes de resposta e a resposta correta."
    try:
        quiz_data = model.generate_content(prompt).text
        # Processamento do quiz (extrair perguntas, op√ß√µes e respostas)
        quiz = []
        blocos = quiz_data.split("Pergunta ")
        for bloco in blocos[1:]:
            partes = bloco.split("\n")
            pergunta = partes[0].strip().split(":", 1)[1].strip()
            opcoes = [op.strip() for op in partes[1:5] if op.strip()]
            resposta_correta = partes[5].split(":")[1].strip()

            quiz.append({
                "pergunta": pergunta,
                "opcoes": opcoes,
                "resposta_correta": resposta_correta
            })
        return quiz
    except Exception as e:
         print(f"Erro ao gerar quiz com Gemini: {e}")
         return None

def verificar_resposta_quiz(resposta_aluno, estado):
        """Verifica se a resposta do aluno ao quiz est√° correta."""
        num_pergunta = len(estado["respostas_quiz"])
        quiz_atual = estado["quiz_atual"]
        resposta_correta = quiz_atual[num_pergunta]["resposta_correta"]

        if resposta_aluno.lower().startswith(resposta_correta.lower()):
            estado["pontos"] += 10
            estado["respostas_quiz"].append(resposta_aluno)
            return "Resposta correta! +10 pontos"
        else:
            estado["respostas_quiz"].append(resposta_aluno)
            return f"Resposta incorreta. A resposta correta era: {resposta_correta}"

def avancar_modulo(estado):
        """Avan√ßa para o pr√≥ximo m√≥dulo/t√≥pico do curso."""
        modulos = ["introducao", "modulo1", "modulo2", "modulo3", "mentoria", "fim"]  # Adicione mais m√≥dulos conforme necess√°rio
        indice_atual = modulos.index(estado["modulo_atual"])

        if indice_atual < len(modulos) - 1:
            estado["modulo_atual"] = modulos[indice_atual + 1]
            return True
        else:
            return False  # Chegou ao fim do curso.

# --- L√≥gica Principal ---

def processar_mensagem(mensagem_aluno, numero_aluno):
    estado = get_estado_aluno(numero_aluno)
    # Adiciona a mensagem do usu√°rio ao hist√≥rico da conversa, *sempre*
    estado["conversa"].append(f"Aluno: {mensagem_aluno}")

    # --- Formul√°rio ---
    if estado["contexto"] == "formulario":
        return coletar_informacoes_iniciais(mensagem_aluno, estado)

    # --- Apresentando Conte√∫do ---
    if estado["contexto"] == "apresentando_conteudo":
        if estado["aguardando_resposta"] == "sim/nao":
            if mensagem_aluno.lower() == "sim":
                estado["aguardando_resposta"] = None
                return apresentar_conteudo(estado)
            elif mensagem_aluno.lower() == "n√£o":
                estado["aguardando_resposta"] = None
                estado["contexto"] = "interacao_livre"
                return ["Ok. O que voc√™ gostaria de fazer agora?"]
            else:
                return ["Por favor, responda 'sim' ou 'n√£o'."]
        else:
            # Se n√£o estava esperando sim/n√£o, vai para intera√ß√£o livre
            estado["contexto"] = "interacao_livre"

    # --- Quiz ---
    if estado["contexto"] == "quiz":
        if estado["quiz_pendente"]:
                feedback_resposta = verificar_resposta_quiz(mensagem_aluno, estado)
                num_pergunta = len(estado["respostas_quiz"])

                if num_pergunta == len(estado["quiz_atual"]):
                    estado["quiz_pendente"] = False
                    estado["respostas_quiz"] = []
                    if avancar_modulo(estado):
                        estado["submodulo_atual"] = 0
                        estado["contexto"] = "apresentando_conteudo"
                        return [f"{feedback_resposta}\n\nQuiz finalizado!.\n\nPr√≥ximo m√≥dulo: {estado['modulo_atual']}", *apresentar_conteudo(estado)] #Desempacota
                    else:
                        return [f"{feedback_resposta}\n\nQuiz finalizado!  Voc√™ concluiu o curso!"]
                else:
                    proxima_pergunta = estado["quiz_atual"][num_pergunta]
                    return [f"{feedback_resposta}\n\nPr√≥xima pergunta:\n\n{proxima_pergunta['pergunta']}\n{chr(10).join(proxima_pergunta['opcoes'])}"]
    # --- Comandos ---
    if mensagem_aluno.lower() == "quiz":
        estado["quiz_atual"] = gerar_quiz(estado["modulo_atual"])
        if estado["quiz_atual"] is None:  return ["Desculpe, n√£o consegui gerar o quiz agora."]
        estado["quiz_pendente"] = True
        estado["contexto"] = "quiz"
        primeira_pergunta = estado["quiz_atual"][0]
        return [f"Quiz do m√≥dulo {estado['modulo_atual']}:\n\n{primeira_pergunta['pergunta']}\n{chr(10).join(primeira_pergunta['opcoes'])}"]

    elif mensagem_aluno.lower() == "continuar":
        if estado["modulo_atual"] == "fim": return ["Voc√™ j√° concluiu todos os m√≥dulos."]

        if avancar_modulo(estado):
            estado["submodulo_atual"] = 0
            estado["contexto"] = "apresentando_conteudo"
            return apresentar_conteudo(estado)  # Apresenta o novo m√≥dulo
        else:
            return ["Voc√™ j√° concluiu todos os m√≥dulos."]

    elif mensagem_aluno.lower() == "pontos":
        return [f"Voc√™ tem {estado['pontos']} pontos."]

    elif mensagem_aluno.lower() == "mentoria":
        if estado['modulo_atual'] == 'mentoria':
            if estado['pontos'] >= 50:
                estado['pontos'] -= 50
                return ["Parab√©ns! Voc√™ resgatou uma mentoria. Entraremos em contato para agendar. Seus pontos restantes: {}".format(estado['pontos'])]
            else:
                return ["Voc√™ n√£o tem pontos suficientes para resgatar uma mentoria. Voc√™ precisa de 50 pontos, e tem {}".format(estado['pontos'])]
        else:
            return ["Voc√™ s√≥ pode pedir mentoria quando chegar no m√≥dulo 'mentoria'. Continue o curso!"]

    # --- Intera√ß√£o Livre ---
    estado["contexto"] = "interacao_livre"  # Por padr√£o, se n√£o for um comando, √© intera√ß√£o livre
    prompt = f"""
    {gerar_prompt_mestre()}

    Responda √† pergunta ou coment√°rio do aluno.

    Perfil do Aluno:
    {estado["perfil"]}

    Hist√≥rico da Conversa:
    {' '.join(estado['conversa'])}

    M√≥dulo Atual: {estado["modulo_atual"]}

    Mensagem do Aluno: {mensagem_aluno}
    """
    try:
        resposta = model.generate_content(prompt).text
        estado["conversa"].append(f"Assistente: {resposta}")
        return [resposta]  # Retorna uma lista com a resposta
    except Exception as e:
        print(f"Erro ao responder com Gemini: {e}")
        return ["Desculpe, tive um problema ao responder. Tente novamente."]

# --- Rota do WhatsApp ---
@app.route("/whatsapp", methods=['POST'])
def whatsapp_webhook():
    mensagem_aluno = request.values.get('Body', '').lower()
    numero_aluno = request.values.get('From', '')

    try:
        respostas = processar_mensagem(mensagem_aluno, numero_aluno)
    except Exception as e:
        print(f"Erro geral em processar_mensagem: {e}")  # Log de erro gen√©rico
        respostas = ["Houve um erro ao processar sua mensagem."]

    resp = MessagingResponse()
    for mensagem in respostas:
        resp.message(mensagem)  # Envia *v√°rias* mensagens, se houver
    return str(resp)

@app.route("/")
def hello_world():
    return "<p>Ol√°, Mundo!</p>"

if __name__ == "__main__":
    app.run(debug=True)